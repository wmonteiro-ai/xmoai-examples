# -*- coding: utf-8 -*-
"""
Created on Thu Jul  2 21:37:05 2020

@author: wmonteiro92
"""

import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt

def view_results(results):
    """Show the counterfactuals found in a plot.

    :param results: the results generated by the *_results.py files.
    :type results: np.array
    """
    # for every dataset tested
    for dataset in set(results[:, 0]):    
        df_results = pd.DataFrame()
        
        # for every algorithm tested
        for result in results[results[:, 0]==dataset]:
            plot_front(result[1], dataset, result[2], result[4])
            
def plot_front(algorithm_name, dataset, pareto_front, moo_algorithms):
    """Plot the Pareto front approximation found by a xMOAI run.

    :param algorithm_name: the machine learning model used to evaluate a 
        given set of counterfactuals.
    :type algorithm_name: str
    :param dataset: the dataset name.
    :type dataset: str
    :param pareto_front: the Pareto front approximation of a set of 
        counterfactuals found.
    :type pareto_front: np.array
    :param moo_algorithms: the names of the multiobjective optimization
        algorithms responsible of finding all valid counterfactuals.
    """
    df_algorithm = pd.DataFrame()
    df_algorithm['Pareto_Algorithm'] = moo_algorithms.flatten()
    
    # for each objective
    for col in range(pareto_front.shape[1]):
        df_algorithm['f' + str(col+1)] = pareto_front[:, col]
    
    title = f'{algorithm_name} - {dataset}'
    ax = sns.pairplot(data=df_algorithm, hue='Pareto_Algorithm')
    ax.fig.suptitle(title)